/* tslint:disable */
/* eslint-disable */
/**
 * Product Catalog API
 * Manage your products
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddSubCategoriesHttpRequest,
  ApproveProductHttpRequest,
  CreateCategoryHttpRequest,
  CreateProductHttpRequest,
  CreateReviewerHttpRequest,
  RejectProductHttpRequest,
  SubmitForApprovalHttpRequest,
  UpdateProductHttpRequest,
} from '../models';
import {
    AddSubCategoriesHttpRequestFromJSON,
    AddSubCategoriesHttpRequestToJSON,
    ApproveProductHttpRequestFromJSON,
    ApproveProductHttpRequestToJSON,
    CreateCategoryHttpRequestFromJSON,
    CreateCategoryHttpRequestToJSON,
    CreateProductHttpRequestFromJSON,
    CreateProductHttpRequestToJSON,
    CreateReviewerHttpRequestFromJSON,
    CreateReviewerHttpRequestToJSON,
    RejectProductHttpRequestFromJSON,
    RejectProductHttpRequestToJSON,
    SubmitForApprovalHttpRequestFromJSON,
    SubmitForApprovalHttpRequestToJSON,
    UpdateProductHttpRequestFromJSON,
    UpdateProductHttpRequestToJSON,
} from '../models';

export interface AddSubCategoriesHttpControllerExecuteRequest {
    categoryId: string;
    addSubCategoriesHttpRequest: AddSubCategoriesHttpRequest;
}

export interface ApproveProductHttpControllerExecuteRequest {
    productId: string;
    approveProductHttpRequest: ApproveProductHttpRequest;
}

export interface CreateCategoryHttpControllerExecuteRequest {
    createCategoryHttpRequest: CreateCategoryHttpRequest;
}

export interface CreateProductHttpControllerExecuteRequest {
    createProductHttpRequest: CreateProductHttpRequest;
}

export interface CreateReviewerHttpControllerExecuteRequest {
    createReviewerHttpRequest: CreateReviewerHttpRequest;
}

export interface RejectProductHttpControllerExecuteRequest {
    productId: string;
    rejectProductHttpRequest: RejectProductHttpRequest;
}

export interface SubmitForApprovalHttpControllerExecuteRequest {
    productId: string;
    submitForApprovalHttpRequest: SubmitForApprovalHttpRequest;
}

export interface UpdateProductHttpControllerExecuteRequest {
    productId: string;
    updateProductHttpRequest: UpdateProductHttpRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async addSubCategoriesHttpControllerExecuteRaw(requestParameters: AddSubCategoriesHttpControllerExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling addSubCategoriesHttpControllerExecute.');
        }

        if (requestParameters.addSubCategoriesHttpRequest === null || requestParameters.addSubCategoriesHttpRequest === undefined) {
            throw new runtime.RequiredError('addSubCategoriesHttpRequest','Required parameter requestParameters.addSubCategoriesHttpRequest was null or undefined when calling addSubCategoriesHttpControllerExecute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/categories/{categoryId}/add-sub-categories`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AddSubCategoriesHttpRequestToJSON(requestParameters.addSubCategoriesHttpRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addSubCategoriesHttpControllerExecute(requestParameters: AddSubCategoriesHttpControllerExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addSubCategoriesHttpControllerExecuteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async approveProductHttpControllerExecuteRaw(requestParameters: ApproveProductHttpControllerExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling approveProductHttpControllerExecute.');
        }

        if (requestParameters.approveProductHttpRequest === null || requestParameters.approveProductHttpRequest === undefined) {
            throw new runtime.RequiredError('approveProductHttpRequest','Required parameter requestParameters.approveProductHttpRequest was null or undefined when calling approveProductHttpControllerExecute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/products/{productId}/approve`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApproveProductHttpRequestToJSON(requestParameters.approveProductHttpRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async approveProductHttpControllerExecute(requestParameters: ApproveProductHttpControllerExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.approveProductHttpControllerExecuteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async createCategoryHttpControllerExecuteRaw(requestParameters: CreateCategoryHttpControllerExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createCategoryHttpRequest === null || requestParameters.createCategoryHttpRequest === undefined) {
            throw new runtime.RequiredError('createCategoryHttpRequest','Required parameter requestParameters.createCategoryHttpRequest was null or undefined when calling createCategoryHttpControllerExecute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCategoryHttpRequestToJSON(requestParameters.createCategoryHttpRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createCategoryHttpControllerExecute(requestParameters: CreateCategoryHttpControllerExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createCategoryHttpControllerExecuteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async createProductHttpControllerExecuteRaw(requestParameters: CreateProductHttpControllerExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createProductHttpRequest === null || requestParameters.createProductHttpRequest === undefined) {
            throw new runtime.RequiredError('createProductHttpRequest','Required parameter requestParameters.createProductHttpRequest was null or undefined when calling createProductHttpControllerExecute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/products`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProductHttpRequestToJSON(requestParameters.createProductHttpRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createProductHttpControllerExecute(requestParameters: CreateProductHttpControllerExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createProductHttpControllerExecuteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async createReviewerHttpControllerExecuteRaw(requestParameters: CreateReviewerHttpControllerExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createReviewerHttpRequest === null || requestParameters.createReviewerHttpRequest === undefined) {
            throw new runtime.RequiredError('createReviewerHttpRequest','Required parameter requestParameters.createReviewerHttpRequest was null or undefined when calling createReviewerHttpControllerExecute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/reviewers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateReviewerHttpRequestToJSON(requestParameters.createReviewerHttpRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createReviewerHttpControllerExecute(requestParameters: CreateReviewerHttpControllerExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createReviewerHttpControllerExecuteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async rejectProductHttpControllerExecuteRaw(requestParameters: RejectProductHttpControllerExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling rejectProductHttpControllerExecute.');
        }

        if (requestParameters.rejectProductHttpRequest === null || requestParameters.rejectProductHttpRequest === undefined) {
            throw new runtime.RequiredError('rejectProductHttpRequest','Required parameter requestParameters.rejectProductHttpRequest was null or undefined when calling rejectProductHttpControllerExecute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/products/{productId}/reject`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RejectProductHttpRequestToJSON(requestParameters.rejectProductHttpRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async rejectProductHttpControllerExecute(requestParameters: RejectProductHttpControllerExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rejectProductHttpControllerExecuteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async submitForApprovalHttpControllerExecuteRaw(requestParameters: SubmitForApprovalHttpControllerExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling submitForApprovalHttpControllerExecute.');
        }

        if (requestParameters.submitForApprovalHttpRequest === null || requestParameters.submitForApprovalHttpRequest === undefined) {
            throw new runtime.RequiredError('submitForApprovalHttpRequest','Required parameter requestParameters.submitForApprovalHttpRequest was null or undefined when calling submitForApprovalHttpControllerExecute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/products/{productId}/submit`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SubmitForApprovalHttpRequestToJSON(requestParameters.submitForApprovalHttpRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async submitForApprovalHttpControllerExecute(requestParameters: SubmitForApprovalHttpControllerExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.submitForApprovalHttpControllerExecuteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateProductHttpControllerExecuteRaw(requestParameters: UpdateProductHttpControllerExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling updateProductHttpControllerExecute.');
        }

        if (requestParameters.updateProductHttpRequest === null || requestParameters.updateProductHttpRequest === undefined) {
            throw new runtime.RequiredError('updateProductHttpRequest','Required parameter requestParameters.updateProductHttpRequest was null or undefined when calling updateProductHttpControllerExecute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/products/{productId}`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProductHttpRequestToJSON(requestParameters.updateProductHttpRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateProductHttpControllerExecute(requestParameters: UpdateProductHttpControllerExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateProductHttpControllerExecuteRaw(requestParameters, initOverrides);
    }

}
